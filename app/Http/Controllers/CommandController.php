<?phpnamespace App\Http\Controllers;use Symfony\Component\Process\Exception\ProcessFailedException;use Symfony\Component\Process\Process;class CommandController extends Controller{    /**     * Instantiate a new controller instance.     *     * @return void     */    public function __construct()    {        $this->middleware('auth');    }    /**     *Run phpunit commands     */    public function composer($value = '')    {        $methodToBeTest = array(            'Registration with valid data' => 'test_i_can_create_an_account_with_valid_data',            'Registration with invalid data' => 'test_i_can_create_an_account_with_invalid_data',            'Login with valid data' => 'test_i_can_login_with_valid_data',            'Login with invalid data' => 'test_i_can_login_with_invalid_data',            'Preferences with valid data' => 'test_preferences_with_valid_data',            'Preferences with invalid data' => 'test_preferences_with_invalid_data',            'Register New Bitcoin Wallet with valid data' => 'test_BTH_updation_with_valid_data',            'Register New Bitcoin Wallet with invalid data' => 'test_BTH_updation_with_invalid_data',            'Register New Ether Wallet with valid data' => 'test_ETC_updation_with_valid_data',            'Register New Ether Wallet with invalid data' => 'test_ETC_updation_with_invalid_data'        );        return $methodToBeTest;    }        public function adminTestCase()    {        $methodToBeTest = array(            'Admin display login page' => 'testDisplayLoginPage',            'Admin display dashboard page' => 'testDisplayDashboardPage',            'Admin display configuration setting page' => 'testDisplayConfigurationSettingPage',            'Admin display user list page' => 'testDisplayUsersListPage',            'Admin display user detail page' => 'testDisplayUsersDetailPage',            'Admin display fund transfer page' => 'testDisplayFundTransferPage',            'Admin display transactions list page' => 'testDisplayTransactionsListPage',            'Admin display configuration phases list page' => 'testDisplayConfigurationPhasesListPage',            'Admin login test' => 'testLogin',            'Admin fund transfer test' => 'testFundTransfer',            'Admin fund transfer with referral' => 'testFundTransferWithReferral'        );        return $methodToBeTest;    }    /**     *Run phpunit commands     */    public function runTestCase($method)    {        $frontMethodToBeTest = $this->composer();        $adminMethodToBeTest = $this->adminTestCase();        if (in_array($method, $frontMethodToBeTest)) {            try {                $process = new Process('cd .. && vendor/bin/phpunit --filter ' . $method . ' tests/Feature/RegistrationTest.php');                $process->run();                if (!$process->isSuccessful()) {                    throw new ProcessFailedException($process);                }                                // executes after the command finishes                $resultData = $process->getOutput();            } catch (ProcessFailedException $e) {                //command not run please contact admin"                $resultData = $e->getMessage();            }        } else if (in_array($method, $adminMethodToBeTest)) {            try {                $process = new Process('cd .. && vendor/bin/phpunit --filter ' . $method . ' tests/Feature/RegistrationTest.php');                $process->run();                if (!$process->isSuccessful()) {                    throw new ProcessFailedException($process);                }                                // executes after the command finishes                $resultData = $process->getOutput();            } catch (ProcessFailedException $e) {                //command not run please contact admin"                $resultData = $e->getMessage();            }        } else {            $resultData = "No output to show";        }        echo json_encode($resultData);    }} 