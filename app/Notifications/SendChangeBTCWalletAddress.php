<?phpnamespace App\Notifications;use Illuminate\Bus\Queueable;use Illuminate\Notifications\Messages\MailMessage;use Illuminate\Notifications\Notification;class SendChangeBTCWalletAddress extends Notification{    use Queueable;    protected $token, $new_BTC_wallet_address;    /**     * Create a new notification instance.     *     * @return void     */    public function __construct($emailData)    {        //        $this->token = $emailData['unique_confirmation_key'];        $this->new_BTC_wallet_address = $emailData['new_value'];    }    /**     * Get the notification's delivery channels.     *     * @param  mixed  $notifiable     * @return array     */    public function via($notifiable)    {        return ['mail'];    }    /**     * Get the mail representation of the notification.     *     * @param  mixed  $notifiable     * @return \Illuminate\Notifications\Messages\MailMessage     */    public function toMail($notifiable)    {        $message = new MailMessage();        $message->subject(trans('emails.changeBTCRequestSubject'))                ->greeting(trans('emails.changeBTCGreeting', ['firstname' => \Auth::User()->first_name, 'lastname' => \Auth::User()->last_name]))                ->line(trans('emails.changeBTCMessage', ['oldBTCWalletAddress' => \Auth::User()->BTC_wallet_address, 'newBTCWalletAddress' => $this->new_BTC_wallet_address]))                ->action(trans('emails.changeBTCButton'), route('change.request', ['token' => $this->token]))                ->line(trans('emails.changeBTCThanks'));        return $message;    }    /**     * Get the array representation of the notification.     *     * @param  mixed  $notifiable     * @return array     */    public function toArray($notifiable)    {        return [            //        ];    }}